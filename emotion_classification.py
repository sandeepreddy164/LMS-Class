# -*- coding: utf-8 -*-
"""Emotion_Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lz5EqLGBOeqkOzmWeJToBk5dnJiUG7Ww
"""

import pandas as pd

df = pd.read_csv('/content/emotion.csv')
df.head()

df.shape

df.info()

df.isna().sum()

df.label.value_counts()

import seaborn as sns
sns.countplot(df.label)

df['text'] = df['text'].apply(lambda x: " ".join(x.lower() for x in x.split()))

from nltk.corpus import stopwords
stop = stopwords.words('english')
df['text'] = df['text'].apply(lambda x: " ".join(x for x in x.split() if x not in stop))

!pip install textblob

# Do lemmatization
from nltk.stem import WordNetLemmatizer
from textblob import Word
df['text'] = df['text'].apply(lambda x: " ".join([Word(word).lemmatize() for word in x.split()]))
df['text'].head()

X = df[['text']]
y = df[['label']]

from sklearn.model_selection import train_test_split
x_train, y_train, x_test, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(x_train.shape, y_train.shape)

print(x_test.shape, y_test.shape)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
xtrain_tfidf = tfid.transform(x_train.text.tolist())
xtest_tfidf = tfid.transform(x_test.text.tolist())

from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn import metrics
pclf = PassiveAggressiveClassifier()
pclf.fit(xtrain_tfidf, y_train)
pred = pclf.predict(xtest_tfidf)
print(metrics.classification_report(y_test, pred))

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(xtrain_tfidf, y_train)
pred = model.predict(xtest_tfidf)

